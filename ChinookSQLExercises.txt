--1. `non_usa_customers.sql`: Provide a query showing Customers (just their full names, customer ID and country) who are not in the US.
SELECT c.LastName, c.FirstName, c.CustomerId, c.Country
FROM Customer c
WHERE c.Country != 'USA'

--2. `brazil_customers.sql`: Provide a query only showing the Customers from Brazil.
SELECT *
FROM Customer c
WHERE c.Country = 'Brazil'

--3. `brazil_customers_invoices.sql`: Provide a query showing the Invoices of customers who are from Brazil. The resultant table should show the customer's full name, Invoice ID, Date of the invoice and billing country.
SELECT c.FirstName, c.LastName, i.InvoiceId, i.InvoiceDate, i.BillingCountry
FROM Invoice i
JOIN Customer c ON c.CustomerId = i.CustomerId
WHERE Country = 'Brazil'

--4. `sales_agents.sql`: Provide a query showing only the Employees who are Sales Agents.
Select *
FROM Employee
Where Title = 'Sales Support Agent'

--5. `unique_invoice_countries.sql`: Provide a query showing a unique/distinct list of billing countries from the Invoice table.
Select Distinct
BillingCountry
FROM Invoice

--6. `sales_agent_invoices.sql`: Provide a query that shows the invoices associated with each sales agent. The resultant table should include the Sales Agent's full name.
Select
LastName
,FirstName
,InvoiceId
,Title
FROM Employee, Invoice
Where Title = 'Sales Support Agent'

--7. `invoice_totals.sql`: Provide a query that shows the Invoice Total, Customer name, Country and Sale Agent name for all invoices and customers.
Select
e.LastName EmployeeLastName
,e.FirstName EmployeeFirstName
,c.LastName CustomerLastName
,c.FirstName CustomerFirstName
,InvoiceId
,Total
FROM Employee e, Invoice i, Customer c
Where Title = 'Sales Support Agent'

-------------------OR---------------
Select
e.LastName as EmployeeLastName
,e.FirstName as EmployeeFirstName
,c.LastName as CustomerLastName
,c.FirstName as CustomerFirstName
,InvoiceId
,Total
FROM Employee as e, Invoice as i, Customer as c
Where Title = 'Sales Support Agent'

--8. `total_invoices_year.sql`: How many Invoices were there in 2009 and 2011?
Select count(i.InvoiceId) as [2011InvoiceId]
From Invoice i
Where i.InvoiceDate between '2011-01-01 00:00:00' and '2011-12-31 00:00:00'

Select count(i.InvoiceId) as [2009InvoiceId]
From Invoice as i
Where i.InvoiceDate between '2009-01-01 00:00:00' and '2009-12-31 00:00:00'
---BETTER SOLUTION
SELECT COUNT(*)
FROM Invoice as i
WHERE i.InvoiceDate between '2009-01-01' and '2009-12-31'
    or i.InvoiceDate between '2011-01-01' and '2011-12-31'

--9. `total_sales_year.sql`: What are the respective total sales for each of those years?
Select count(i.InvoiceId) as [2011TotalInvoices], sum(i.Total) as [2011TotalSales]
From Invoice i
Where i.InvoiceDate between '2011-01-01 00:00:00' and '2011-12-31 00:00:00'

Select count(i.InvoiceId) as [2009TotalInvoices], sum(i.Total) as [2009TotalSales]
From Invoice as i
Where i.InvoiceDate between '2009-01-01 00:00:00' and '2009-12-31 00:00:00'

--10. `invoice_37_line_item_count.sql`: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for Invoice ID 37.
Select count(*) as TotalInvoiceLineId
FROM InvoiceLine il
WHERE il.InvoiceId = '37'

--11. `line_items_per_invoice.sql`: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for each Invoice. HINT: [GROUP BY](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql)
SELECT il.InvoiceId, COUNT(*) as TotalLineItems
FROM InvoiceLine il
GROUP BY il.InvoiceId

--12. `line_item_track.sql`: Provide a query that includes the purchased track name with each invoice line item.
SELECT il.InvoiceId, il.InvoiceLineId, t.[Name]
FROM InvoiceLine il
JOIN Track t ON il.TrackId = t.TrackId

----***is this wrong******

--13. `line_item_track_artist.sql`: Provide a query that includes the purchased track name AND artist name with each invoice line item.
SELECT il.InvoiceLineId, t.[Name] as TrackName, art.[Name] as ArtistName
FROM InvoiceLine il
JOIN Track t ON  t.TrackId = il.TrackId
JOIN Album alb ON alb.AlbumId = t.AlbumId
JOIN Artist art ON art.ArtistId = alb.ArtistId

--14. `country_invoices.sql`: Provide a query that shows the # of invoices per country. HINT: [GROUP BY](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql)
SELECT BillingCountry, COUNT(*) as TotalInvoices
FROM Invoice
GROUP BY BillingCountry

--15. `playlists_track_count.sql`: Provide a query that shows the total number of tracks in each playlist. The Playlist name should be include on the resulant table.
SELECT p.[Name] as PlaylistName, Count(pt.TrackId) as NumberOfTracks
FROM Playlist p, PlaylistTrack pt 
WHERE p.PlayListId = pt.PlayListId 
GROUP BY p.[Name]

--16. `tracks_no_id.sql`: Provide a query that shows all the Tracks, but displays no IDs. The result should include the Album name, Media type and Genre.
SELECT t.[Name] as TrackName, alb.Title as AlbumName, mt.[Name] as MediaType, g.[Name] as Genre
FROM Track t, Album alb, MediaType mt, Genre g
WHERE t.AlbumID = alb.AlbumId
AND t.MediaTypeId = mt.MediaTypeId
AND t.GenreId = g.GenreId
ORDER BY alb.Title

--17. `invoices_line_item_count.sql`: Provide a query that shows all Invoices but includes the # of invoice line items.
SELECT i.*, COUNT(il.InvoiceLineId) as NumberOfLineItems
FROM Invoice i
JOIN InvoiceLine il
ON i.InvoiceId = il.InvoiceId
GROUP BY i.InvoiceId, i.CustomerId, i.BillingAddress, i.BillingCity, i.BillingCountry, i.BillingPostalCode, i.BillingState, i.InvoiceDate, i.Total

--18. `sales_agent_total_sales.sql`: Provide a query that shows total sales made by each sales agent.
SELECT e.EmployeeId, e.FirstName as EmployeeFirstName, e.LastName as EmployeeLastName, SUM(i.Total) as TotalSales
FROM Employee e
JOIN Customer c ON  c.SupportRepId = e.EmployeeId
JOIN Invoice i ON  i.CustomerId = c.CustomerId
WHERE e.Title = 'Sales Support Agent'
GROUP BY e.EmployeeId, e.FirstName, e.LastName

--3	Jane	Peacock	39.62
--4	Margaret	Park	39.62
--5	Steve	Johnson	39.62


--19. `top_2009_agent.sql`: Which sales agent made the most in sales in 2009? HINT: [MAX](https://docs.microsoft.com/en-us/sql/t-sql/functions/max-transact-sql)
SELECT Top 1 e.FirstName + ' ' + e.lastName as SalesAgent, SUM(i.Total) as TotalSales
FROM Employee e
JOIN Customer c ON c.SupportRepId = e.EmployeeId
JOIN Invoice i ON i.CustomerId = c.CustomerId
WHERE YEAR(i.InvoiceDate) = '2009'
AND e.Title = 'Sales Support Agent'
GROUP BY e.FirstName, e.LastName
ORDER BY TotalSales desc
-------didnt use max so wondering if this is correct

--Steve Johnson	164.34

--20. `top_agent.sql`: Which sales agent made the most in sales over all?
SELECT Top 1 e.FirstName + ' ' + e.lastName as SalesAgent, SUM(i.Total) as TotalSales
FROM Employee e
JOIN Customer c ON c.SupportRepId = e.EmployeeId
JOIN Invoice i ON i.CustomerId = c.CustomerId
WHERE e.Title = 'Sales Support Agent'
GROUP BY e.FirstName, e.LastName
ORDER BY TotalSales desc

--21. `sales_agent_customer_count.sql`: Provide a query that shows the count of customers assigned to each sales agent.
SELECT e.FirstName + ' ' + e.lastName as SalesAgent, COUNT(*) as NumberOfCustomers
FROM Employee e
JOIN Customer c ON c.SupportRepId = e.EmployeeId
WHERE e.Title = 'Sales Support Agent'
GROUP BY e.FirstName, e.LastName

--Steve Johnson	18
--Margaret Park	20
--Jane Peacock	21

--22. `sales_per_country.sql`: Provide a query that shows the total sales per country.
SELECT BillingCountry, SUM(Total) as TotalSales
FROM Invoice
GROUP BY BillingCountry

--or could do it this way but more lines of code
SELECT c.Country, SUM(i.Total) as TotalSales
FROM Invoice i
JOIN Customer c ON c.CustomerId = i.CustomerId
GROUP BY c.Country

--23. `top_country.sql`: Which country's customers spent the most?
SELECT Top 1 BillingCountry, SUM(Total) as TotalSales
FROM Invoice
GROUP BY BillingCountry
ORDER BY TotalSales desc

--24. `top_2013_track.sql`: Provide a query that shows the most purchased track of 2013.
SELECT Top 1 t.[Name] as TrackName, COUNT(t.TrackId) as NumberOfTracksSold, t.TrackId
FROM Track t
JOIN InvoiceLine il ON il.TrackId = t.TrackId
JOIN Invoice i ON i.InvoiceId = il.InvoiceId
WHERE YEAR(i.InvoiceDate) = '2013'
GROUP BY t.TrackId, t.[Name]
ORDER BY NumberOfTracksSold DESC

---other way to solve
--SELECT t.[Name] TrackName, COUNT(*) NumberOfTracksSold
--FROM InvoiceLine il
--JOIN (SELECT InvoiceId FROM Invoice WHERE YEAR(InvoiceDate) = '2013') i ON il.InvoiceId = i.InvoiceId
--JOIN Track t ON t.TrackId = il.TrackId
--GROUP BY t.TrackId, t.[Name]
--ORDER BY NumberOfTracksSold DESC

--ALL OF THEM HAVE 1 TRACK SOLD


--25. `top_5_tracks.sql`: Provide a query that shows the top 5 most purchased songs.

SELECT Top 5 t.Name as TrackName, COUNT(t.TrackId) as NumberOfTracksSold
FROM Invoice i
JOIN InvoiceLine il ON il.InvoiceId = i.InvoiceId
JOIN Track t ON t.TrackId = il.TrackId
GROUP BY t.Name
ORDER BY NumberOfTracksSold desc

-- if you do it by name, you get dazed and confused with 5 because it is on multiple led zeppelin albums
--if you do it by t.trackId then you get a bunch with 2

SELECT Top 5 t.Name as TrackName, COUNT(t.TrackId) as NumberOfTracksSold
FROM Invoice i
JOIN InvoiceLine il ON il.InvoiceId = i.InvoiceId
JOIN Track t ON t.TrackId = il.TrackId
GROUP BY t.TrackId
ORDER BY NumberOfTracksSold desc

--PROOF OF MULTIPLE INSTANCES
--select t.TrackId, t.Name, alb.Title, art.Name
--from track t
--join Album alb ON alb.AlbumId = t.AlbumId
--join Artist art on art.ArtistId = alb.ArtistId
--Where t.Name = 'Dazed and Confused'
--Group by t.Name, t.TrackId, alb.Title, art.Name

--26. `top_3_artists.sql`: Provide a query that shows the top 3 best selling artists.
SELECT TOP 3 art.[Name] as ArtistName, COUNT(*) TotalSales
FROM InvoiceLine il
JOIN Track t ON t.TrackId = il.TrackId 
JOIN Album alb ON alb.AlbumId = t.AlbumId
JOIN Artist art ON art.ArtistId = alb.ArtistId
GROUP BY art.[Name]
ORDER BY TotalSales DESC

--Iron Maiden	140
--U2	107
--Metallica	91

--27. `top_media_type.sql`: Provide a query that shows the most purchased Media Type.
SELECT Top 1 mt.[Name] as MediaType, COUNT(*) Total
FROM InvoiceLine i
JOIN Track t ON t.TrackId = i.TrackId 
JOIN MediaType mt ON mt.MediaTypeId = t.MediaTypeId
GROUP BY mt.[Name]
ORDER BY Total DESC