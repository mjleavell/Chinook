--1. `non_usa_customers.sql`: Provide a query showing Customers (just their full names, customer ID and country) who are not in the US.
SELECT c.LastName, c.FirstName, c.CustomerId, c.Country
FROM Customer c
WHERE c.Country != 'USA'

--2. `brazil_customers.sql`: Provide a query only showing the Customers from Brazil.
SELECT *
FROM Customer c
WHERE c.Country = 'Brazil'

--3. `brazil_customers_invoices.sql`: Provide a query showing the Invoices of customers who are from Brazil. The resultant table should show the customer's full name, Invoice ID, Date of the invoice and billing country.
Select
 [FirstName] 
,[LastName]
,[InvoiceId]
,[InvoiceDate]
,[BillingCountry]
FROM Invoice
Where Country = 'Brazil'

--4. `sales_agents.sql`: Provide a query showing only the Employees who are Sales Agents.
Select *
FROM Employee
Where Title = 'Sales Support Agent'

--5. `unique_invoice_countries.sql`: Provide a query showing a unique/distinct list of billing countries from the Invoice table.
Select Distinct
BillingCountry
FROM Invoice

--6. `sales_agent_invoices.sql`: Provide a query that shows the invoices associated with each sales agent. The resultant table should include the Sales Agent's full name.
Select
LastName
,FirstName
,InvoiceId
,Title
FROM Employee, Invoice
Where Title = 'Sales Support Agent'

--7. `invoice_totals.sql`: Provide a query that shows the Invoice Total, Customer name, Country and Sale Agent name for all invoices and customers.
Select
e.LastName EmployeeLastName
,e.FirstName EmployeeFirstName
,c.LastName CustomerLastName
,c.FirstName CustomerFirstName
,InvoiceId
,Total
FROM Employee e, Invoice i, Customer c
Where Title = 'Sales Support Agent'

-------------------OR---------------
Select
e.LastName as EmployeeLastName
,e.FirstName as EmployeeFirstName
,c.LastName as CustomerLastName
,c.FirstName as CustomerFirstName
,InvoiceId
,Total
FROM Employee as e, Invoice as i, Customer as c
Where Title = 'Sales Support Agent'

--8. `total_invoices_year.sql`: How many Invoices were there in 2009 and 2011?
Select count(i.InvoiceId) as [2011InvoiceId]
From Invoice i
Where i.InvoiceDate between '2011-01-01 00:00:00' and '2011-12-31 00:00:00'

Select count(i.InvoiceId) as [2009InvoiceId]
From Invoice as i
Where i.InvoiceDate between '2009-01-01 00:00:00' and '2009-12-31 00:00:00'
---BETTER SOLUTION
SELECT COUNT(*)
FROM Invoice as i
WHERE i.InvoiceDate between '2009-01-01' and '2009-12-31'
    or i.InvoiceDate between '2011-01-01' and '2011-12-31'

--9. `total_sales_year.sql`: What are the respective total sales for each of those years?
Select count(i.InvoiceId) as [2011TotalInvoices], sum(i.Total) as [2011TotalSales]
From Invoice i
Where i.InvoiceDate between '2011-01-01 00:00:00' and '2011-12-31 00:00:00'

Select count(i.InvoiceId) as [2009TotalInvoices], sum(i.Total) as [2009TotalSales]
From Invoice as i
Where i.InvoiceDate between '2009-01-01 00:00:00' and '2009-12-31 00:00:00'

--10. `invoice_37_line_item_count.sql`: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for Invoice ID 37.
Select count(*) as TotalInvoiceLineId
FROM InvoiceLine il
WHERE il.InvoiceId = '37'

--11. `line_items_per_invoice.sql`: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for each Invoice. HINT: [GROUP BY](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql)
SELECT il.InvoiceId, COUNT(*) as TotalLineItems
FROM InvoiceLine il
GROUP BY il.InvoiceId

--12. `line_item_track.sql`: Provide a query that includes the purchased track name with each invoice line item.
SELECT il.InvoiceId, t.[Name]
FROM InvoiceLine il
RIGHT JOIN Track t
ON il.TrackId = t.TrackId

--13. `line_item_track_artist.sql`: Provide a query that includes the purchased track name AND artist name with each invoice line item.
SELECT il.InvoiceLineId, t.[Name] as TrackName, art.[Name] as ArtistName
FROM InvoiceLine il
JOIN Album alb ON alb.AlbumId = t.AlbumId
JOIN Track t ON il.TrackId = t.TrackId
JOIN Artist art ON art.ArtistId = alb.ArtistId

--14. `country_invoices.sql`: Provide a query that shows the # of invoices per country. HINT: [GROUP BY](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql)
SELECT BillingCountry, COUNT(*) as TotalInvoices
FROM Invoice
GROUP BY BillingCountry

--15. `playlists_track_count.sql`: Provide a query that shows the total number of tracks in each playlist. The Playlist name should be include on the resulant table.
SELECT p.[Name] as PlaylistName, Count(pt.TrackId) as NumberOfTracks
FROM Playlist p, PlaylistTrack pt 
WHERE p.PlayListId = pt.PlayListId 
GROUP BY p.[Name]

--16. `tracks_no_id.sql`: Provide a query that shows all the Tracks, but displays no IDs. The result should include the Album name, Media type and Genre.
SELECT t.[Name] as TrackName, alb.Title as AlbumName, mt.[Name] as MediaType, g.[Name] as Genre
FROM Track t, Album alb, MediaType mt, Genre g
WHERE t.AlbumID = alb.AlbumId
AND t.MediaTypeId = mt.MediaTypeId
AND t.GenreId = g.GenreId
ORDER BY alb.Title

--17. `invoices_line_item_count.sql`: Provide a query that shows all Invoices but includes the # of invoice line items.
SELECT i.InvoiceId, COUNT(il.InvoiceLineId) as NumberOfLineItems
FROM Invoice i
JOIN InvoiceLine il
ON i.InvoiceId = il.InvoiceId
GROUP BY i.InvoiceId

--18. `sales_agent_total_sales.sql`: Provide a query that shows total sales made by each sales agent.
SELECT e.EmployeeId, e.FirstName as EmployeeFirstName, e.LastName as EmployeeLastName, SUM(i.Total) as TotalSales
FROM Invoice i
JOIN Customer c ON c.CustomerId = i.CustomerId
JOIN Employee e ON e.EmployeeId = c.SupportRepId
WHERE e.Title = 'Sales Support Agent'
GROUP BY e.EmployeeId, e.FirstName, e.LastName

--19. `top_2009_agent.sql`: Which sales agent made the most in sales in 2009? HINT: [MAX](https://docs.microsoft.com/en-us/sql/t-sql/functions/max-transact-sql)

--20. `top_agent.sql`: Which sales agent made the most in sales over all?
--21. `sales_agent_customer_count.sql`: Provide a query that shows the count of customers assigned to each sales agent.
--22. `sales_per_country.sql`: Provide a query that shows the total sales per country.
--23. `top_country.sql`: Which country's customers spent the most?
--24. `top_2013_track.sql`: Provide a query that shows the most purchased track of 2013.
--25. `top_5_tracks.sql`: Provide a query that shows the top 5 most purchased songs.
--26. `top_3_artists.sql`: Provide a query that shows the top 3 best selling artists.
--27. `top_media_type.sql`: Provide a query that shows the most purchased Media Type.